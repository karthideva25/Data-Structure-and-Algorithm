#include <iostream>
using namespace std;
class FenwickTree2D {
    vector<vector<int>> tree;
    int rows, cols;

public:
    FenwickTree2D(int r, int c) : rows(r), cols(c) {
        tree.resize(r + 1, vector<int>(c + 1, 0));
    }

    void update(int x, int y, int delta) {
        for (int i = x; i <= rows; i += (i & -i)) {
            for (int j = y; j <= cols; j += (j & -j)) {
                tree[i][j] += delta;
            }
        }
    }

    int prefixSum(int x, int y) {
        int sum = 0;
        for (int i = x; i > 0; i -= (i & -i)) {
            for (int j = y; j > 0; j -= (j & -j)) {
                sum += tree[i][j];
            }
        }
        return sum;
    }

    int rangeSum(int x1, int y1, int x2, int y2) {
        return prefixSum(x2, y2) 
             - prefixSum(x1 - 1, y2) 
             - prefixSum(x2, y1 - 1) 
             + prefixSum(x1 - 1, y1 - 1);
    }
};
int main() {
    vector<vector<int>> mat = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    
    int n = mat.size(), m = mat[0].size();
    FenwickTree2D ft(n, m);

    // Initialize the tree
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            ft.update(i + 1, j + 1, mat[i][j]);

    // Query sum of submatrix (1,1) to (2,2)
    cout << ft.rangeSum(1, 1, 2, 2) << endl; // Output: 1+2+4+5 = 12

    // Update (2,2) to +10
    ft.update(2, 2, 10);  // Add 10 to existing value at (2,2)
}
